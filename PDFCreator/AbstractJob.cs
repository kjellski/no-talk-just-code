using System;
using System.Collections.Generic;
using System.IO;
using NLog;

namespace pdfforge.PDFCreator.Core
{

        /// <summary>
        ///     AbstractJob implements a few methods of the Job interface that can be shared among the Job types
        /// </summary>
        public abstract class AbstractJob
        {
            protected readonly Logger Logger = LogManager.GetCurrentClassLogger();
            private bool _cleanedUp;
            private int _pageCount = -1;

            /// <summary>
            ///     JobInfo that defines the current Job (source files, Metadata etc)
            /// </summary>
            public IJobInfo JobInfo { get; protected set; }

            /// <summary>
            ///     The Output files that have been generated by this job
            /// </summary>
            public IList<string> OutputFiles { get; set; }

            /// <summary>
            ///     The template for the output files. This may contain a wildcard to create multiple files, i.e. a file per page. The
            ///     template is used to construct the final output filename.
            /// </summary>
            public string OutputFilenameTemplate { get; set; }

            /// <summary>
            ///     The folder in which the job can store temporary data
            /// </summary>
            public string JobTempFolder { get; set; }

            /// <summary>
            ///     The folder in which the job produces the output files
            /// </summary>
            public string JobTempOutputFolder { get; set; }

            /// <summary>
            ///     Temporary filename of the output file
            /// </summary>
            public string JobTempFileName
            {
                get { return "output"; }
            }


            /// <summary>
            ///     Clean up all temporary files that have been generated during the Job
            /// </summary>
            public void CleanUp()
            {
                Logger.Debug("Cleaning up after the job");

                if (_cleanedUp)
                {
                    Logger.Debug("Job was cleaned up already");
                    return;
                }

                // Delete temporary output
                if (!String.IsNullOrEmpty(JobTempFolder) && Path.IsPathRooted(JobTempFolder) &&
                    Directory.Exists(JobTempFolder))
                {
                    try
                    {
                        Directory.Delete(JobTempFolder, true);
                    }
                    catch (IOException ex)
                    {
                        Logger.Warn("Error while deleting temporary folder: " + ex.Message);
                    }
                }

                // Delete source files
                foreach (var file in JobInfo.SourceFiles)
                {
                    try
                    {
                        File.Delete(file.Filename);
                        DeleteFolderIfEmptyAndNotSpool(Path.GetDirectoryName(file.Filename));
                    }
                    catch (IOException ex)
                    {
                        Logger.Warn("Error while deleting source file: " + ex.Message);
                    }
                }

                // Delete inf file
                try
                {
                    File.Delete(JobInfo.InfFile);
                    DeleteFolderIfEmptyAndNotSpool(Path.GetDirectoryName(JobInfo.InfFile));
                }
                catch (IOException ex)
                {
                    Logger.Warn("Error while deleting job file: " + ex.Message);
                }

                _cleanedUp = true;
            }

            private void DeleteFolderIfEmptyAndNotSpool(string directoryPath)
            {
                var directoryInfo = new DirectoryInfo(directoryPath);
                var name = directoryInfo.Name;

                // ensure the spool folder is never deleted, because doing so can lead to problems
                if (string.Equals("Spool", name, StringComparison.InvariantCultureIgnoreCase))
                    return;

                DeleteFolderIfEmpty(directoryPath);
            }

            private void DeleteFolderIfEmpty(string folder)
            {
                if (FileUtil.DirectoryIsEmpty(folder))
                {
                    Directory.Delete(folder);
                }
            }

            /// <summary>
            ///     Runs the job and all actions
            /// </summary>
            public void RunJob()
            {
               // lots of stuff to run the job and execute all actions
            }
        }
}

